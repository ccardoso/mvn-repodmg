package healthy.rim.type;import javax.xml.bind.annotation.XmlAccessType;import javax.xml.bind.annotation.XmlAccessorType;import javax.xml.bind.annotation.XmlElement;import javax.xml.bind.annotation.XmlRootElement;import javax.xml.bind.annotation.XmlType;/** * A concept descriptor represents any kind of concept usually by giving a code * defined in a code system. A concept descriptor can contain the original text * or phrase that served as the basis of the coding and one or more translations * into different coding systems. A concept descriptor can also contain * qualifiers to describe, e.g., the concept of a "left foot" as a * post-coordinated term built from the primary code "FOOT" and the qualifier * "LEFT". In exceptional cases, the concept descriptor need not contain a code * but only the original text describing that concept. * * @author Yosvany Llerena Rodr√≠guez <yosvanyllr@gmail.com> * @since 21-Jan-2013 */@XmlRootElement(name = "CD")@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name = "CD", propOrder = {    "code",    "codeSystem",    "codeDisplayName"})public class CD extends RimDataType {    @XmlElement(required = true)    private String code = "";    @XmlElement    private String codeSystem = "";    @XmlElement    private String codeDisplayName = "";    /**     * Default Constructor     */    public CD() {    }    /**     * Constructor     *     * @param code code descriptor     * @param codeSystem code system name     * @param codeDisplayName code application display name     */    public CD(String code, String codeSystem, String codeDisplayName) {        this.code = code;        this.codeSystem = codeSystem;        this.codeDisplayName = codeDisplayName;    }    public String getCode() {        return code;    }    public void setCode(String code) {        this.code = code;    }    public String getCodeSystem() {        return codeSystem;    }    public void setCodeSystem(String codeSystem) {        this.codeSystem = codeSystem;    }    public String getCodeDisplayName() {        return codeDisplayName;    }    public void setCodeDisplayName(String codeDisplayName) {        this.codeDisplayName = codeDisplayName;    }    @Override    public int hashCode() {        int hash = 3;        hash = 83 * hash + (this.code != null ? this.code.hashCode() : 0);        hash = 83 * hash + (this.codeSystem != null ? this.codeSystem.hashCode() : 0);        hash = 83 * hash + (this.codeDisplayName != null ? this.codeDisplayName.hashCode() : 0);        return hash;    }    @Override    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        final CD other = (CD) obj;        if ((this.code == null) ? (other.code != null) : !this.code.equals(other.code)) {            return false;        }        if ((this.codeSystem == null) ? (other.codeSystem != null) : !this.codeSystem.equals(other.codeSystem)) {            return false;        }        if ((this.codeDisplayName == null) ? (other.codeDisplayName != null) : !this.codeDisplayName.equals(other.codeDisplayName)) {            return false;        }        return true;    }    @Override    public String toString() {        return "CD{" + "code=" + code + ", codeSystem=" + codeSystem + ", codeDisplayName=" + codeDisplayName + '}';    }}