package healthy.rim.type;import javax.xml.bind.annotation.XmlAccessType;import javax.xml.bind.annotation.XmlAccessorType;import javax.xml.bind.annotation.XmlElement;import javax.xml.bind.annotation.XmlRootElement;import javax.xml.bind.annotation.XmlType;import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;/** * A name for a person, organisation, place or thing. A sequence of name parts, * such as given name or family name, prefix, suffix, etc. Examples for entity * name values are &quot;Ant&oacute;nio de Sousa Campos.&quot;, &quot;Centro de * Saude de Aveiro.&quot;, &quot;Microsoft Corporation&quot;, etc. An entity * name may be as simple as a character string or may consist of several entity * name parts, such as, &quot;Ant&oacute;nio&quot;, &quot;de Sousa&quot;, * &quot;Campos&quot; * * @author Yosvany Llerena Rodr√≠guez <yosvanyllr@gmail.com> * @since 21-Jan-2013 */@XmlRootElement(name = "EN")@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name = "EN", propOrder = {    "given",    "middle",    "family",    "fullName",    "type",    "purpose",    "usefor",    "preferred",    "validTime"})public class EN  extends RimDataType {    private static final long serialVersionUID = 20130121009924L;    @XmlElement(type = EntityNameType.class, required = true)    private EntityNameType type;    @XmlElement(type = EntityNamePurpose.class , required = true)    private EntityNamePurpose purpose;    @XmlElement(required = true, defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean usefor = false;    @XmlElement(required = true, defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean preferred = false;    @XmlElement(required = true)    private String given="";    @XmlElement    private String middle="";    @XmlElement    private String family="";    @XmlElement    private String fullName="";    @XmlElement(type = IVL.class)    private IVL<TS> validTime = new IVL<>(new TS(), new TS());    public EN() {    }    public EN(EntityNameType type, EntityNamePurpose purpose, Boolean usefor, Boolean preferred,            String given, String middle, String family, IVL<TS> validTime) {        this.type = type;        this.purpose = purpose;        this.usefor = usefor;        this.preferred = preferred;        this.given = given;        this.middle = middle;        this.family = family;        this.fullName = given + " " + middle + " " + family;        this.validTime = validTime;    }    public String getGiven() {        return given;    }    public void setGiven(String given) {        this.fullName = given + " " + middle + " " + family;        this.given = given;    }    public String getMiddle() {        return middle;    }    public void setMiddle(String middle) {        this.fullName = given + " " + middle + " " + family;        this.middle = middle;    }    public String getFamily() {        return family;    }    public void setFamily(String family) {        this.fullName = given + " " + middle + " " + family;        this.family = family;    }    /**     * A Name Type     *     * @return Professional, Married, Birth Name, Reputation     */    public EntityNameType getType() {        return type;    }    public void setType(EntityNameType type) {        this.type = type;    }    /**     * Purpose of this name     *     * @return Mailing, Cheques, Correspondence     */    public EntityNamePurpose getPurpose() {        return purpose;    }    public void setPurpose(EntityNamePurpose purpose) {        this.purpose = purpose;    }    /**     * Use for Legal Name     *     * @return if true means it's a legal name     */    public Boolean isUsefor() {        return usefor;    }    public void setUsefor(Boolean usefor) {        this.usefor = usefor;    }    /**     * Preferred name     *     * @return if true means this name it's a preferred name     */    public Boolean isPreferred() {        return preferred;    }    public void setPreferred(Boolean preferred) {        this.preferred = preferred;    }    public String getFullName() {        return fullName;    }    public void setFullName(String fullName) {        this.fullName = fullName;    }    /**     * Time period in which this name is valid     *     * @return an Integererval of Time     */    public IVL<TS> getValidTime() {        return validTime;    }    public void setValidTime(IVL<TS> validTime) {        this.validTime = validTime;    }    @Override    public int hashCode() {        int hash = 7;        hash = 59 * hash + (this.type != null ? this.type.hashCode() : 0);        hash = 59 * hash + (this.purpose != null ? this.purpose.hashCode() : 0);        hash = 59 * hash + (this.usefor != null ? this.usefor.hashCode() : 0);        hash = 59 * hash + (this.preferred != null ? this.preferred.hashCode() : 0);        hash = 59 * hash + (this.given != null ? this.given.hashCode() : 0);        hash = 59 * hash + (this.middle != null ? this.middle.hashCode() : 0);        hash = 59 * hash + (this.family != null ? this.family.hashCode() : 0);        hash = 59 * hash + (this.fullName != null ? this.fullName.hashCode() : 0);        hash = 59 * hash + (this.validTime != null ? this.validTime.hashCode() : 0);        return hash;    }    @Override    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        final EN other = (EN) obj;        if (this.type != other.type) {            return false;        }        if (this.purpose != other.purpose) {            return false;        }        if (this.usefor != other.usefor && (this.usefor == null || !this.usefor.equals(other.usefor))) {            return false;        }        if (this.preferred != other.preferred && (this.preferred == null || !this.preferred.equals(other.preferred))) {            return false;        }        if ((this.given == null) ? (other.given != null) : !this.given.equals(other.given)) {            return false;        }        if ((this.middle == null) ? (other.middle != null) : !this.middle.equals(other.middle)) {            return false;        }        if ((this.family == null) ? (other.family != null) : !this.family.equals(other.family)) {            return false;        }        if ((this.fullName == null) ? (other.fullName != null) : !this.fullName.equals(other.fullName)) {            return false;        }        if (this.validTime != other.validTime && (this.validTime == null || !this.validTime.equals(other.validTime))) {            return false;        }        return true;    }    @Override    public String toString() {        return "EN{" + "fullName=" + fullName + '}';    }}